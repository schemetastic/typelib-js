// typelib-js | V 0.10.0 | Author: Â© Rodrigo Calix | License: MIT
var typelib=function(y){"use strict";const i=function(e,o){var t=function(r,a){var s=function(n){if(n===void 0)return!1;if(Object.prototype.toString.call(n)!="[object Object]")throw TypeError("The `params` argument must be a plain object");if(n.writable!==void 0&&n.writable!==!0&&n.writable!==!1)throw TypeError("The parameter `writable` must be a boolean");if(n.throwError!==void 0&&n.throwError!==!0&&n.throwError!==!1)throw TypeError("The parameter `throwError` must be a boolean");return!0}(a),u=function(){var n=Object.seal({writable:!1,throwError:!1});return s?Object.assign(n,a):n}();this.params=u.writable?u:Object.freeze(u);var f=Object.prototype.toString.call(r).toLowerCase().slice(8,-1),T=function(){var n=["function","number","error"].indexOf(f)>-1||typeof r=="object";if(!n)return null;var p=["string","number","boolean"];if(typeof r=="object"&&p.indexOf(f)>-1)return f+"object";if(f=="function"&&r.toString().indexOf("class")===0)return"class";var c=["NaN","Infinity","-Infinity"];return f=="number"&&c.indexOf(r.toString())>-1?r.toString().toLowerCase():f=="error"?r.toString().split(":")[0].toLowerCase():null}();return this.is=T||f,this.isTruthy=Boolean(r),this.isFalsy=!Boolean(r),this.isNullish=["undefined","null"].indexOf(this.is)>-1,this.isNumber=typeof r=="number",this.isNumeric=typeof r=="number"||typeof r=="bigint",this.isFunction=typeof r=="function",this.isError=f=="error",this.isPrimitive=["string","number","bigint","boolean","undefined","symbol"].indexOf(typeof r)>-1||this.is==="null",this.isObject=!this.isPrimitive,this.kinds=function(n){var p=["isTruthy","isFalsy","isNullish","isNumeric","isNumber","isFunction","isError","isPrimitive","isObject"],c=[];return p.forEach(function(w){n[w]&&c.push(w.toLowerCase().replace(/^is/,""))}),u.writable?c:Object.freeze(c)}(this),u.writable?this:Object.freeze(this)};return t.prototype.isIt=function(r){if(typeof r!="string"&&!Array.isArray(r))throw TypeError("isIt(verifyType) method, the `verifyType` argument should be a string or an array");return Array.isArray(r)?r.indexOf(this.is)>-1:r===this.is},t.prototype.isNot=function(r){if(typeof r!="string"&&!Array.isArray(r))throw TypeError("isNot(verifyType) method, the `verifyType` argument should be a string or an array");return!this.isIt(r)},new t(e,o)},h=function(e){if(i(e).isNot("object"))throw TypeError("The `params` argument must be a plain object");if(i(e.isError).isNot("boolean"))throw TypeError("In `params.isError` is expected to be a boolean.");if(i(e.isType).isNot("string"))throw TypeError("In `params.isType` is expected to be a string.");if(i(e.verifyType).isNot(["string","array"]))throw TypeError("In `params.verifyType` is expected to be a string or an array.");if(i(e.defaultErrorMessage).isNot(["function","string"]))throw TypeError("in `params.defaultErrorMessage` is expected to be a function");(function(t){["isError","isType","verifyType","defaultErrorMessage"].forEach(function(r){t[r]=e[r]})})(this)};h.prototype.throwIt=function(e){if(!this.isError)return null;e&&b(e,this);let o=e&&i(e.message).isIt(["function","string"])?e.message:this.defaultErrorMessage,t=new TypeError(i(o).isIt("function")?o(this.isType,this.verifyType):o);throw e&&e.cause&&(t.cause=e.cause),t},h.prototype.catchIt=function(e){if(!this.isError)return null;e&&b(e,this);let o=e&&i(e.message).isIt(["function","string"])?e.message:this.defaultErrorMessage,t=new TypeError(i(o).isIt("function")?o(this.isType,this.verifyType):o);return e&&e.cause&&(t.cause=e.cause),t};function b(e,o){if(e&&i(e).isNot("object"))throw TypeError("The `params` argument should be a plain object.");if(e&&e.message&&i(e.message).isNot(["function","string"]))throw TypeError("In `params.message` is expected to be a function or a string.");if(e&&e.message&&i(e.message).isIt("function")&&i(e.message(o.isType,o.verifyType)).isNot("string"))throw TypeError("In `params.message()` is expected to return a string")}const d=(()=>{try{if(global)return!0}catch{return!1}})(),l={beginCode:d?"\x1B[31m":"",resetCode:d?"\x1B[0m":""},E=function(e){function o(t){this.type=i(t)}return o.prototype.isIt=function(t){if(i(t).isNot(["string","array"]))throw TypeError("isIt(verifyType) method, the `verifyType` argument should be a string or an array");let r=function(a,s){let u=Array.isArray(s)&&s.length>1;return l.beginCode+"Unexpected type: "+a+(u?"; The following types are not allowed: "+s.toString()+l.resetCode:"; That type is not allowed"+l.resetCode)};return new h({isError:this.type.isIt(t),isType:this.type.is,verifyType:t,defaultErrorMessage:r})},o.prototype.isNot=function(t){if(i(t).isNot(["string","array"]))throw TypeError("isNot(verifyType) method, the `verifyType` argument should be a string or an array");let r=function(a,s){let u=Array.isArray(s)&&s.length>1;return l.beginCode+"Unexpected type: "+a+"; The only allowed type"+(u?"s are: ":" is: ")+s.toString()+l.resetCode};return new h({isError:this.type.isNot(t),isType:this.type.is,verifyType:t,defaultErrorMessage:r})},new o(e)};return function(){try{window.type=i,window.typeErrorIf=E}catch{}}(),y.type=i,y.typeErrorIf=E,Object.defineProperty(y,"__esModule",{value:!0}),y}({});
